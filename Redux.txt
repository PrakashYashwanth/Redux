What is Redux?

-> Redux is a state management library for JavaScript applications.

-> In other words, redux is used to manage the data or state of complex JavaScript applications

-> all states are stored in a java script object namely "store"

-> store can be assumed as a database for frontend

-> state management tools (help in syncing the state throughout the app)

-> Ex :- "Flux, MobX, Redux" among which Redux is most popular tool

-> Redux is compatible with React, Angular, Vue, Vanilla JS

-> pros of Redux :-
    -> Centralize application's state
    -> Data-flow transparent
    -> Easily debug applications
    -> Preserve the page state

-> cons of Redux :-
    -> Very complex (many dev feels as it implements functional programming) (solved)
    -> write a lot of boiler plate code (Traditional way ..... > Modern way) (solved)

-> Redux usecases :-
    -> Complex UI in terms of data like facebook, amazon
    -> Data flow is complex

-> not to use Redux :-
    -> Small or medium size of applications
    -> Simple UI & Static data

-> How redux works
    -> One application has only one single store
    -> Reducer takes the current state as argument and return the updated state.
    -> The reducer doesn't make any HTTP calls or change DOM elements, hence it doesn't create any kind of side effects
        They just take in the state as param and return the updated state. Hence we call them pure functions
    -> In reducer, we update the state with spread operator or immer library.
    -> By using action parameter we can tell reducer which task they have to perform.

    ex :- const reducer = (state,action) => {}

-> Steps for implementing redux
    -> Designing the store
    -> List our actions (what to do)
    -> Create reducer function (How to do)
    -> Create redux store
    -> don't name the high level folder as redux(name something like store as below),
         as we don't want the folder name and package name to be same.
    -> Folder Structure
        -> scr
            -> store
                -> store.js
                -> tasks
                    -> actions.js
                    -> reducer.js
                    -> actionTypes.js or constants.js
                -> employees
                    -> actions.js
                    -> reducer.js
                    -> actionTypes.js or constants.js
    -> Duck Module structure
        -> scr
            -> store
                -> store.js
                -> tasks.js
                -> employees.js

-> Redux Thunk
    -> In programming term, thunk is "a piece of code that does some delay work".
    -> Rather than run the logic now, we can write code that can be used to perform the work later.
    -> We cannot insert async for action methods, which will error out as actions must be plain objects.
        Thhunk helps us solve this
    -> So, with thunk we can write asyn logic and complex logic in redux.

-> Redux Dev tools
    -> Configure the redux dev tools
    -> See actions which we perform
    -> Trace actions
    -> Import and export log file

-> Best way to create Redux applications (Redux Toolkit)
    -> This library helps us prevent writing a lot of boilier plate code
    -> Officially recommended by redux